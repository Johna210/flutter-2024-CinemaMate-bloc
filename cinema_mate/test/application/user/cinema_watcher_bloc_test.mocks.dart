// Mocks generated by Mockito 5.4.4 from annotations
// in cinema_mate/test/application/user/cinema_watcher_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cinema_mate/domain/movie/movie.dart' as _i9;
import 'package:cinema_mate/domain/movie/movieFailure.dart' as _i8;
import 'package:cinema_mate/domain/user/cinema/cinema.dart' as _i7;
import 'package:cinema_mate/domain/user/cinema/cinemaFailure.dart' as _i5;
import 'package:cinema_mate/domain/user/cinema/i_cinema_repository.dart' as _i2;
import 'package:dartz/dartz.dart' as _i4;
import 'package:kt_dart/kt.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ICinemaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICinemaRepository extends _i1.Mock implements _i2.ICinemaRepository {
  MockICinemaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Either<_i5.CinemaFailure, _i6.KtList<_i7.CinemaInfo>>>
      watchAll() => (super.noSuchMethod(
            Invocation.method(
              #watchAll,
              [],
            ),
            returnValue: _i3.Stream<
                _i4
                .Either<_i5.CinemaFailure, _i6.KtList<_i7.CinemaInfo>>>.empty(),
          ) as _i3.Stream<
              _i4.Either<_i5.CinemaFailure, _i6.KtList<_i7.CinemaInfo>>>);

  @override
  _i3.Stream<_i4.Either<_i8.MovieFailure, List<_i9.UserMovieInfo>>>
      checkoutCinemaMovies(String? id) => (super.noSuchMethod(
            Invocation.method(
              #checkoutCinemaMovies,
              [id],
            ),
            returnValue: _i3.Stream<
                _i4.Either<_i8.MovieFailure, List<_i9.UserMovieInfo>>>.empty(),
          ) as _i3
              .Stream<_i4.Either<_i8.MovieFailure, List<_i9.UserMovieInfo>>>);
}
