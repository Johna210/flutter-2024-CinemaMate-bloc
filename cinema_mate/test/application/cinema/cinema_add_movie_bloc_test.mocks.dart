// Mocks generated by Mockito 5.4.4 from annotations
// in cinema_mate/test/application/cinema/cinema_add_movie_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:cinema_mate/domain/crudMovie/add_movie/add_failure.dart' as _i5;
import 'package:cinema_mate/domain/crudMovie/add_movie/I_add_movie_repository.dart'
    as _i3;
import 'package:cinema_mate/domain/crudMovie/add_movie/value_objects.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAddMovierepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAddMovierepository extends _i1.Mock
    implements _i3.IAddMovierepository {
  MockIAddMovierepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AddFailure, _i2.Unit>> addMovie({
    required String? title,
    required int? numberOfSeats,
    required String? genres,
    required _i6.Date? date,
    required _i7.File? image,
    required _i6.Time? time,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovie,
          [],
          {
            #title: title,
            #numberOfSeats: numberOfSeats,
            #genres: genres,
            #date: date,
            #image: image,
            #time: time,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AddFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AddFailure, _i2.Unit>(
          this,
          Invocation.method(
            #addMovie,
            [],
            {
              #title: title,
              #numberOfSeats: numberOfSeats,
              #genres: genres,
              #date: date,
              #image: image,
              #time: time,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AddFailure, _i2.Unit>>);
}
